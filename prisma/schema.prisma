datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
}

model Account {
  id                 String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @db.ObjectId
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? 
  access_token       String? 
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? 
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String   @unique
  username      String   @unique 
  password      String?
  image         String?
  role          String
  createdAt     DateTime  @default(now())
  accounts      Account[]
  sessions      Session[]
  collections   Collection[]
  comments      Comment[]
  likes         Like[]
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  collections Collection[]
}

model Collection {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    description String?
    topic       String
    image       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    userId      String   @db.ObjectId
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    categoryId  String   @db.ObjectId
    category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    items       Item[]
    customFields   CustomField[]
}

model Item {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    collectionId String  @db.ObjectId
    collection  Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    comments    Comment[]
    likes       Like[]
    tags        Tag[]
    customFieldValues  ItemCustomFieldValue[]
}

model Comment {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    content     String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    itemId      String   @db.ObjectId
    item        Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
    userId      String   @db.ObjectId
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Like {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    itemId      String   @db.ObjectId
    item        Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String   @db.ObjectId
}

model Tag {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    itemId      String @db.ObjectId
    item        Item   @relation(fields: [itemId], references: [id], onDelete: Cascade)
}

model CustomField {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    type        String
    collectionId      String   @db.ObjectId
    collection        Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
    customFieldValues  ItemCustomFieldValue[]
}

model ItemCustomFieldValue {
    id              String  @id @default(auto()) @map("_id") @db.ObjectId
    stringValue     String?
    intValue        Int?
    multilineValue  String?
    booleanValue    Boolean?
    dateValue       DateTime?
    itemId          String  @db.ObjectId
    item            Item      @relation(fields: [itemId], references: [id], onDelete: Cascade)
    customFieldId   String  @db.ObjectId
    customField     CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
}